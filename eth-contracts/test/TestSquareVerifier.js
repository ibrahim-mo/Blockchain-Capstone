// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
var Verifier = artifacts.require('Verifier');
var fs = require('fs');
var proof = JSON.parse(fs.readFileSync('zokrates/code/square/proof.json'));

contract('TestSquareVerifier', async (accounts) => {

    const owner = accounts[0];

    var verifier;
    before('setup contract', async () => {
        verifier = await Verifier.new({from: owner});
    });

    // Test verification with correct proof
    // - use the contents from proof.json generated from zokrates steps
    it('should verify with correct proof', async function () {
        let result = await verifier.verifyTx
            .call(proof.proof, proof.inputs, {from: owner});
        assert.equal(result, true);
    });

    // Test verification with incorrect proof
    it('should not verify with incorrect proof', async function () {
        let incorrect_inputs = ["0x2", "0x4"];
        let result = await verifier.verifyTx
            .call(proof.proof, incorrect_inputs, {from: owner});
        assert.equal(result, false);
    });

});
